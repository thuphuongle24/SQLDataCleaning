-- DATA CLEANING
-- Raw data: Table Layoffs

-- Cleaning data in 4 steps
-- STEP 0: Create another table so that it wont affect the raw data
-- STEP 1: Delete all the duplicates
-- STEP 2: Stadardize the data
-- STEP 3: Deal with the NULL and empty data
-- STEP 4: Delete column. data if needed

SELECT * 
FROM layoffs
;

-- STEP 0: 
       -- Create another table so that it wont affect the raw data
CREATE TABLE layoffs_staging3
LIKE layoffs;

SELECT * FROM layoffs_staging3;

INSERT INTO layoffs_staging3
SELECT * FROM layoffs;

       -- Create the row_num to identify the raw data
SELECT 
  *,
  ROW_NUMBER() OVER(PARTITION BY company, location, industry, total_laid_off, 
  percentage_laid_off, `date`, stage, country, funds_raised_millions) AS row_num
FROM layoffs_staging3
;

      -- Create a table having the row_num column
CREATE TABLE layoffs_staging4 AS
SELECT 
  *,
  ROW_NUMBER() OVER(
    PARTITION BY company, location, industry, total_laid_off, 
    percentage_laid_off, `date`, stage, country, funds_raised_millions
  ) AS row_num
FROM layoffs_staging3;

SELECT * FROM layoffs_staging4;

-- STEP 1: DELETE ALL THE DUPLICATES
-- 1.1. Delete the duplicates in company
SELECT *
FROM layoffs_staging4
WHERE row_num > 1;

DELETE 
FROM layoffs_staging4
WHERE row_num > 1; -- delete the rows where the has the duplicate data (row_num > 1)

-- STEP 2: STANDARDIZE THE DATA
   -- Standardize the country column --> Remove the space in the name of company
SELECT * FROM layoffs_staging4;

SELECT DISTINCT company
FROM layoffs_staging4; 

SELECT 
   company,
   TRIM(company)
FROM layoffs_staging4; 

UPDATE layoffs_staging4
SET company = TRIM(company)
;
   
   -- Standardize the location column --> The data is fine
SELECT DISTINCT location
FROM layoffs_staging4
ORDER BY 1;

   -- Standardize the country column --> Remove the '.' in the United States.
SELECT DISTINCT country
FROM layoffs_staging4
ORDER BY 1;

SELECT 
   country,
   TRIM(TRAILING '.' FROM country)
FROM layoffs_staging4
ORDER BY 1;

UPDATE layoffs_staging4
SET country = TRIM(TRAILING '.' FROM country)
WHERE country LIKE 'United States%'
;

   -- Standardize the industry column --> Merge the "Crypto%" to "Crypto" only
SELECT DISTINCT industry
FROM layoffs_staging4
ORDER BY 1
;

SELECT *
FROM layoffs_staging4
WHERE industry LIKE 'Crypto%'
;

UPDATE layoffs_staging4
SET industry = 'Crypto'
WHERE industry LIKE 'Crypto%'
; 

   -- Check the data types
   -- Change the data types of date, from text to date
      -- Fix the format in date column
SELECT 
   `date`,
   STR_TO_DATE(`date`, '%m/%d/%Y')
FROM layoffs_staging4
;

UPDATE layoffs_staging4
SET `date` = STR_TO_DATE(`date`, '%m/%d/%Y')
;

      -- Change the data type, from text to date
ALTER TABLE layoffs_staging4
MODIFY COLUMN `date` DATE
;
      
-- STEP 3: Deal with the NULL and empty data
SELECT * FROM layoffs_staging4;

   -- NULLs and empty data in industry column
SELECT *
FROM layoffs_staging4
WHERE industry IS NULL or industry = ''
;

SELECT *
FROM layoffs_staging4
WHERE company = 'Airbnb'   -- same company but missing the industry information
;

   -- Use JOIN to fix the missing data
UPDATE layoffs_staging4
SET industry = NULL
WHERE industry = ''
;

SELECT 
   t1.industry,
   t2.industry
FROM layoffs_staging4 t1
  JOIN layoffs_staging4 t2
    ON t1.company = t2.company
    AND t1.location = t2.location
WHERE t1.industry IS NULL
   AND t2.industry IS NOT NULL
;

UPDATE layoffs_staging4 t1
JOIN layoffs_staging4 t2
    ON t1.company = t2.company
SET t1.industry = t2.industry 
WHERE t1.industry IS NULL
   AND t2.industry IS NOT NULL
;

-- STEP 4: Delete column of data if needed
SELECT * 
FROM layoffs_staging4
WHERE total_laid_off IS NULL AND percentage_laid_off IS NULL
;

   -- Delete the data
DELETE
FROM layoffs_staging4
WHERE total_laid_off IS NULL AND percentage_laid_off IS NULL
; 

SELECT * FROM layoffs_staging4;

-- Now the data is clean
